/* 106 228 203 199 203 251 69 164 171 249 223 147 102 233 72 177 92 124 113 87 79 17 155 171 239 138 133 88 235 28 112 146 102 93 52 214 131 240 31 138 179 248 115 127 118 107 31 112 91 111 14 243 1 121 131 22 69 144 19 214 101 65 133 253 32 122 175 12 198 63 134 23 240 109 90 59 142 194 194 160 148 139 101 68 220 217 181 32 240 36 47 59 74 18 182 145 116 17 29 255 115 236 11 29 111 122  */
/*
ProudNet 1.7.34387-dev003-10


이 프로그램의 저작권은 넷텐션에게 있습니다.
이 프로그램의 수정, 사용, 배포에 관련된 사항은 본 프로그램의 소유권자와의 계약을 따르며,
계약을 준수하지 않는 경우 원칙적으로 무단 사용을 금지합니다.
무단 사용에 의한 책임은 본 프로그램의 소유권자와의 계약서에 명시되어 있습니다.

** 주의: 저작물에 관한 위의 명시를 제거하지 마십시오.


This program is soley copyrighted by Nettention.
Any use, correction, and distribution of this program are subject to the terms and conditions of the License Agreement.
Any violated use of this program is prohibited and will be cause of immediate termination according to the License Agreement.

** WARNING : PLEASE DO NOT REMOVE THE LEGAL NOTICE ABOVE.


此程序的版??Nettention公司所有。
?此程序的修改、使用、?布相?的事?要遵守此程序的所有?者的??。
不遵守???要原?性的禁止擅自使用。
擅自使用的?任明示在?此程序所有?者的合同?里。

** 注意：不要移除?于制作物的上述明示。


このプログラムの著作?はNettentionにあります。
このプログラムの修正、使用、配布に?する事項は本プログラムの所有?者との契約に?い、
契約を遵守しない場合、原則的に無?使用を禁じます。
無?使用による責任は本プログラムの所有?者との契約書に明示されています。

** 注意：著作物に?する上記の明示を除去しないでください。

*/

#pragma once

#if defined(_WIN32)
#include "BasicTypes.h"
#include "dbenums.h"
#include "DbLoadedData2.h"

#ifdef _MSC_VER
#pragma pack(push,8)
#endif

namespace Proud
{
#if (_MSC_VER>=1400)
#pragma managed(push, off)
#endif
	/** \addtogroup db_group
	*  @{
	*/

	/**
	\~korean
	DB cache에 의해 로딩되는 테이블의 이름들입니다.

	root node를 위한 테이블 이름과 child node를 위한 테이블 이름들을 넣으십시오.
	child node를 위한 테이블 이름은 0개 이상이어야 합니다.
	child node를 위한 테이블 이름들 중에는 root node를 위한 테이블 이름과 같은 것이 없어야 합니다.

	\~english

	\~japanese
	DB casheによってロ?ドされるテ?ブル名です。
	root nodeのためのテ?ブル名とchild nodeのためのテ?ブル名などを入れてください。 
	child nodeのためのテ?ブル名は0個以上ではなければなりません。
	child nodeのためのテ?ブル名の中には、root nodeのためのテ?ブル名と同じものがあってはいけません。

	\~
	*/
	class CCachedTableName
	{
	public:
		/** root node를 위한 테이블 이름 */
		String m_rootTableName;
		/** child node를 위한 테이블 이름 */
		CFastArray<Proud::String> m_childTableNames;
	};

	/**
	\~korean
	CDbCacheServer2에서 콜백하는 이벤트나 개발자가 구현해야 하는 메서드를 콜백을 처리하는 delegate 객체

	\~english
	This is delegate object that handle callback event from CDbCacheServer2 or callback method which developer has to realize.

	\~chinese
	在 CDbCacheServer2%回??理回?event或者??者要??的方法的delegate?象。

	\~japanese
	CDbCacheServer2でコ?ルバックするイベントとか開?者が?現しなければならないメソッドをコ?ルバックするdelegateオブジェクト
	\~
	*/
	class IDbCacheServerDelegate2
	{
	public:
		virtual ~IDbCacheServerDelegate2() {}

		/**
		\~korean
		내부 에러 발생시 호출됩니다
		\param errorInfo 에러에 대한 정보입니다. ErrorInfo::ToString()을 이용하시면 간편하게 자세한 문제의 정보를 보실 수 있습니다.

		\~english TODO:translate needed
		It is called when an internal error occurs
		\This is the information on an error. If you use ErrorInfo::ToString(), you can see the detailed information of the problem. 

		\~chinese
		?生?部???呼叫。
		\param errorInfo ???的信息。利用 ErrorInfo::ToString()%的?可以方便看出??的信息。

		\~japanese
		?部エラ??生時に呼び出されます。
		\param errorInfo エラ?に?する情報です。ErrorInfo::ToString()を利用すれば簡?に詳しく問題情報が見られます。

		\~
		*/
		virtual void OnError(ErrorInfo *errorInfo) = 0;

		/**
		\~korean
		내부 경고 발생시 호출됩니다. 에러보다는 낮은 수위의 문제를 보고함.
		\param errorInfo 에러에 대한 정보입니다. ErrorInfo::ToString()을 이용하시면 간편하게 자세한 문제의 정보를 보실 수 있습니다.

		\~english TODO:translate needed
		It is called when an internal warning occurs. This reports a problem with the level lower than an error. 
		\param errorInfo This is the information on an error. If you use ErrorInfo::ToString(), you can see the detailed information of the problem

		\~chinese
		?生?部警告?呼叫。?告比??水平低的??。
		\param errorInfo ???的信息。利用 ErrorInfo::ToString()%的?可以方便看出??的信息。

		\~japanese
		?部警告が?生時に呼び出されます。エラ?よりは低いレベルの問題を報告します。
		\param errorInfo エラ?に?する情報です。ErrorInfo::ToString()を利用すれば簡?に詳しく問題情報が見られます。

		\~
		*/
		virtual void OnWarning(ErrorInfo *errorInfo) = 0;

		/**
		\~korean
		Proud.Exception으로 통합합니다.
		- 일반적으로 유저 코드에서 나는 에러를 처리합니다.
		- 유저는 필요한 것들을 구현하면 됩니다.
		- ExceptionType으로 해당 Exception 객체를 얻어서 사용하면 됩니다.
		- _com_error, void*, std::exception등을 모두 처리합니다.
		또한 catch(...)를 처리하는 OnUnhandledException()도 있습니다.
		- void*는 예외 객체의 타입을 캐스팅해서 받을 수 있습니다. 가령 MFC CException을 받는데 사용됩니다.

		\~english
		Merge to Proud.Exception
		- It handle error that occur from user code.
		- User realize things that user needed.
		- You can use Exceptiontype that obtain Exception object.
		- It process _com_error, void*, std::exception, etc. Also there is OnUnhandledException() that handle catch(...)
		- void* can obtain exceptional object type by casting. For example, it uses obtaining MFC CException.

		\~chinese
		用 Proud.Exception%?一起?。
		- 一般?理?用?代??生的??。
		- 用???需要的?西?可。
		- 用ExceptionType?得?使用相?Exception?象?可。
		- 全部?理_com_error, void*, std::exception 等。也有?理catch(...)的OnUnhandledException()。
		- ??例外?象的?型以后可以接收void*。比如接收MFC CException%的?候使用。

		\~japanese
		Proud.Exceptionに統合します。
		- 一般的にユ?ザ?コ?ドで現れるエラ?を?理します。
		- ユ?ザ?は必要なことを?現すれば良いです。
		- ExceptionTypeで該?Exceptionオブジェクトを得て使えば良いです。
		- _com_error, void*, std::exceptionなどを全て?理します。
		また、catch(...)を?理するOnUnhandledException()もあります。
		- void*は例外オブジェクトのタイプをキャスティングして貰えます。?に、MFC CExceptionを受けることに使われます。

		\~
		*/
		virtual void OnException(const Exception &e) = 0;


		/**
		\~korean
		DB cache server2에서 DBMS에 직접 기록하는 처리는 비동기로 실행된다. 이 메서드는 비동기로 기록하는 처리가
		완료될 때마다 DB cache server의 내부 스레드로부터 콜백됩니다.
		- Visual Studio 2005 이상에서는 override keyword 사용을 권장합니다.
		\param type 완료된 DBMS 기록(PropNode)의 종류 (참고 \ref DbmsWritePropNodePendType)

		\~english
		Direct writing process to DBMS is running asynchronously in DB cache server2. When asynchronous writting process has finished, this method will callback from internal thread in DB cache server.
		- We recommend to use override keyword on Visual Studio 2005 or above.
		\param type Sort of finished DBMS history (PropNode)

		\~chinese
		?DB cache server往DBMS直接??的?理要以?步?行。每??步??的?理完成的?候此方法???部?程回?DB cache server。
		- Visual Studio 2005以上建?使用override keyword。
		\param type 完成的DBMS??（PropNode）的??（?考 \ref DbmsWritePropNodePendType）。

		\~japanese
		DB cache serve2でDBMSに直接記?する?理は非同期で?行されます。このメソッドは非同期で記?する?理が完了する時ごとにDB cache serverの?部スレッドからコ?ルバックされます。
		- Visual Studio 2005以上ではoverride keyword使用をお?めします。
		\param type 完了されたDBMS記?(PropNode)の種類(?考 \ref DbmsWritePropNodePendType)

		\~
		 */
		virtual void OnDbmsWriteDone(DbmsWritePropNodePendType /*type*/) {}
	};

	/**
	\~korean
	CDbCacheServer2가 서버 작동을 시작하기 위해 제공해야 하는 파라메터

	\~english
	Parameter that must be provided in order to initiate CDbCacheServer2

	\~chinese
	CDbCacheServer ?了服?器?始??提供的??。

	\~japanese
	CDbCacheServer2がサ?バ?作動を開始するために提供しなければならないパラメ?タ?
	\~
	 */
	class CDbCacheServer2StartParameter
	{
	public:
		/**
		\~korean
		서버의 주소. 자세한 것은 CStartServerParameter의 같은 이름의 멤버 참고

		\~english
		Server address. Please refer the member of same name at CStartServerParameter for further details.

		\~chinese
		服?器地址。??的??考 CStartServerParameter%的同名成?。

		\~japanese
		サ?バ?のアドレス。詳しくは、CStartServerParameterの同じ名前のメンバ?をご?照ください。
		\~
		 */
		Proud::String m_serverIP;

		/**
		\~korean
		클라이언트의 리스닝 소켓이 바인딩될 주소입니다.
		- 초기값은 빈 문자열입니다.
		- 통상적으로 빈 문자열을 지정하지만 클라이언트가 네트워크 인터페이스(NIC)를 2개 이상 가지는 경우,
		그리고 그것들 중 하나만이 다른 CLanClient에서 오는 접속 요청을 받을 수 있는 경우 여기에 해당됩니다.
		NIC에 지정된 IP 또는 호스트 이름을 지정해야 합니다. 호스트에 있는 NIC 주소 리스트를 얻으려면 Proud.GetLocalIPAddresses를 쓸 수 있습니다.
		- 호스트 이름을 지정할 경우 클라이언트는 서버로 접속하기 위한 주소로 localhost를 입력할 경우 연결 실패를 할 수 있습니다. 이러한 경우
		클라이언트는 서버로 접속하기 위해 서버 호스트의 주소를 명시적으로 입력해야 합니다.

		\~english
		The address that the listening socket of the client to be bound.
		- The initial value is an empty string.
		- Usually set as an empty string but in case when the client has 2 or more of network interfaces (NICs)
		   and when only one of them is able to recieve the connection request from other CLanClient, it is the case to use this.
		  The IP address or the host name designated by the NIC must be used. Proud.GetLocalIPAddresses can be used to get the NIC address list located in the host.
		- In the case that a host name is used, a connection failure can occur when localhost is set as the address to connect to the server for a client.
		  In this case, the client must be set clearly as the server host address in order to connect to the server.

		\~chinese
		玩家的收??口要被boud的地址。
		- 默??是空字符?。
		- 通常?指定空的字符串，?玩家?有??以上??界面（NIC）的?候，?有只有其中一?在接收??的 CLanClient%??的?接邀?的?候??此??。
		要指定?NIC指定的IP或者主机名字。要想?得主机的NIC地址列表的?可以使用 Proud.GetLocalIPAddresses%。
		- 指定主机名字的?候，玩家?了?接服?器?入localhot的?候可能??接失?。??的情?下，用??了?接服?器??明示性的?入服?器主机的地址。

		\~japanese
		クライアントのリスニングソケットがバインディングされるアドレスです。
		- 初期値は空の文字列です。
		- 通常的に空の文字列を指定しますが、クライアントがネットワ?クインタ?フェ?ス(NIC)を2個以上持っている場合、そしてそれらの一つのみが他のCLanClientから?る接?要請を受けられる場合、これに該?します。
		NICに指定されたIPまたはホスト名を指定してください。ホストにあるNICアドレスリストを得るためには、Proud.GetLocalIPAddressesを使うことができます。
		- ホスト名を指定する場合、クライアントはサ?バ?へ接?するためにアドレスで、localhostを入力する場合、接?失敗の可能性があります。このような場合、クライアントはサ?バ?へ接?するためにサ?バ?ホストのアドレスを明示的に入力しなければなりません。

		\~
		*/
		String m_localNicAddr;

		/**
		\~korean
		TCP 리스닝 포트.
		자세한 것은 CStartServerParameter의 같은 이름의 멤버 참고

		\~english
		TCP listening port.
		Please refer the member of same name at CStartServerParameter for further details.

		\~chinese
		TCP 收?端口。
		??的??考 CStartServerParameter%的同名成?。

		\~japanese
		TCPリスニングポ?ト
		詳しくは、CStartServerParameterの同じ名前のメンバ?をご?照くだｓだい。

		\~
		 */
		int m_tcpPort;

		/**
		\~korean
		DBMS에 접속하기 위한 connection string.
		- 문자열에 대해서는 CAdoConnection.Open 도움말 참고

		\~english
		Connection string to connect to DBMS.
		- Please refer CAdoConnection.Open help section for text strings

		\~chinese
		?了?接DBMS的connection string。
		- ?字符串??考 CAdoConnection.Open%?助。

		\~japanese
		DBMSに接?するためのconnection string.		
		- 文字列に?しては、CAdoConnection.Openのヘルプをご?照ください。

		\~
		*/
		Proud::String m_DbmsConnectionString;

		/**
		\~korean
		이 DB 서버에 접속할 수 있는 인증키
		- 절대 이 값은 게임 클라이언트에 노출되어서는 안된다.
		이 값은 DB cache client(게임 서버 등)이 본 서버로 접속하기 위한 목적으로 사용된다.

		\~english
		The authentication key that can connect to this DB server
		- This value MUST NOT be exposed to game clients.
		  This value is used by DB cache client(e.g. game servers and etc.) to connect to main server.

		\~chinese
		可以?接此DB服?器的???。
		- ?????不能泄漏?玩家。
		此?是DB cache client（游?服?器等）?了?接本身服?器?目的使用的。

		\~japanese
		このDBサ?バ?に接?できる認?キ?
		- 絶?この値はゲ?ムクライアントに露出されてはいけません。 
		この値はDB cache client(ゲ?ムサ?バ?など)が本サ?バ?へ接?するための目的で使われます。

		\~
		*/
		Proud::String m_authenticationKey;

		/**
		\~korean
		CDbCacheServer2가 필요로 하는 delegate 객체의 포인터
		- 이 객체는 CDbCacheServer2 객체가 존재하는 한 계속 존재해야 합니다.

		\~english
		Delegate object's pointer that CDbCacheServer requires
		- This object must exist as long as CDbCacheServer object exists.

		\~chinese
		需要 CDbCacheServer2%的delegate?象的pointer。
		- 只要 CDbCacheServer2%?象存在，此?象要一直存在。

		\~japanese
		CDbCacheServer2が必要とするdelegateオブジェクトのポインタ?
		- このオブジェクトはCDbCacheServer2オブジェクトが存在する限り、?けて存在する必要があります。

		\~
		*/
		IDbCacheServerDelegate2* m_delegate;

		/**
		\~korean
		DB cache에 의해 로딩,저장이 일어날 테이블들의 이름입니다.
		Root table과 child table들의 이름을 여기에 넣으십시오.
		자세한 것은 CCachedTableName 을 참고하십시오.

		\~english
		Names of tables to be loaded and saved by DB cache.
		Input names of root and child tables here.
		Refer to CCachedTable for details.

		\~chinese
		在DB?存加?保存的表的名?。
		在此?入Root table和child table的名?。
		??的??考CCachedTableName。

		\~japanese
		DB cacheによってロ?ディング、保存されるテ?ブル名です。
		Root tableとchild ｔａｂｌｅの名前をここに入れてください。
		詳しくは、CCachedTableNameをご?照ください。

		\~
		 */
		CFastArray<CCachedTableName> m_tableNames;

		/**
		\~korean
		DBCacheServer2에 비독점적 접근을 허용하는지에 대한 여부입니다. <a target="_blank" href="http://guide.nettention.com/cpp_ko#dbc2_nonexclusive_overview" >비독점적 데이터 접근하기</a> 기능입니다.
		- 기본적으로 false입니다.

		\~english
		Whether to allow or not to allow a non-exclusive access to DBCacheServer. This is a <a target="_blank" href="http://guide.nettention.com/cpp_en#dbc2_nonexclusive_overview" >Accessing non-exclusive data</a> function.
		- The default value is false.

		\~chinese
		是否允??DBCacheServer2的非?占接近。是<a target="_blank" href="http://guide.nettention.com/cpp_zh#dbc2_nonexclusive_overview" >??共享性?据</a>%功能。
		- 默??false。

		\~japanese
		DBCacheServer2に非?占的接近を許容するかどうかに?するセッティングの値です。<a target="_blank" href="http://guide.nettention.com/cpp_jp#dbc2_nonexclusive_overview" >Accessing non-exclusive data</a> 機能です。
		- 基本的に falseです。

		\~
		*/
		bool	m_allowNonExclusiveAccess;

		/**
		\~korean
		이 값이 null이 아니면, 외부 networker thread를 사용합니다.
		Proud.CStartLanServerParameter.m_externalNetWorkerThreadPool와 같은 역할을 합니다.

		\~english 
		If this value is not null, use an external networker thread. 
		It performs the same role as Proud.CStartLanServerParameter.m_externalNetWorkerThreadPool. 

		\~chinese
		此?不是null的?，使用外部networker thread。
		起着? Proud.CStartLanServerParameter.m_externalNetWorkerThreadPool%一?的作用。

		\~japanese
		この値がnullではなければ、外部networker threadを使用します。
		Proud.CStartLanServerParameter.m_externalNetWorkerThreadPoolと同じ役割をします。

		\~
		*/
		CThreadPool* m_externalNetWorkerThreadPool;

		/**
		\~korean
		이 값이 null이 아니면, 외부 user worker thread를 사용합니다.
		Proud.CStartLanServerParameter.m_externalUserWorkerThreadPool와 같은 역할을 합니다.

		\~english 
		If this value is not null, use an external networker thread.
		It performs the same role as Proud.CStartLanServerParameter.m_externalNetWorkerThreadPool.

		\~chinese
		此?不是null的?，使用外部user worker thread。
		起着? Proud.CStartLanServerParameter.m_externalUserWorkerThreadPool%一?的作用。

		\~japanese
		この値がnullではなければ、外部user worker threadを使用します。
		Proud.CStartLanServerParameter.m_externalUserWorkerThreadPoolと同じ役割をします。

		\~
		*/
		CThreadPool* m_externalUserWorkerThreadPool;

		/**
		\~korean DB 처리를 위한 스레드 풀의 스래드 개수입니다.
		- 최소한 1은 지정 되어야 합니다.
		- DB 처리는 내부적으로 device time을 가지기 때문에 충분히 많은 수를 두는 것이 좋습니다. (가령 100개)
		- 초기값은 10입니다. 0을 지정하면 CPU 갯수로 지정됩니다.

		\~english It is the number of thread pools for DB processing.
		- At least “1” should be set.
		- DB processing has the internal device time, so it is recommended to have many threads. (ex. 100)
		- Initial value is “10”. If setting “0”, it will be set as the number of CPUs.

		\~chinese 是??理DB的?程池?程??。
		- 至少要指定?1.
		- DB?理?部?有 device time，因此建?存有足?的?量。（如100?）
		- 初始??10. 如果指定?0??指定成CPU??。

		\~japanese DB?理のためのスレッドプ?ルのスレッドの個?です。
		- 最小限１は指定されなければなりません。
		- DB?理は?部的にdevice timeがかかるために十分な?を設定する方が良いです。（?に100個）
		- デフォルトは10です。0を指定するとCPUの?だけ指定されます。
		\~
		*/
		int m_dbWorkThreadCount;

		/**
		\~korean DB Cache Server에서 DBMS로 Query를 보낼 때의 CommandTimeout 값입니다.
		- 단위는 초단위이고 초기값은 30초 입니다.

		\~english It is CommandTimeout value when sending Query from DB Cache Server to DBMS.
		- Standard unit is second and default value is 30 seconds.

		\~chinese DB Cache Server向 DBMS?送 Query?的 CommandTimeout ?。
		- 以秒??位，初始??30秒。

		\~japanese DB Cache ServerからDBMSへQueryを送る際の CommandTimeout値です。
		-?位は秒?位で、初期値は30秒です。

		\~
		*/
		int m_commandTimeoutSec;

		/**
		\~korean
		- OnException 콜백 기능을 사용할 지 여부를 선택합니다.
		- 기본값은 true입니다.
		- 만약 false를 지정하면 유저 콜백에서 예상치 못한 Exception 발생 시 OnException이 호출되지 않고 크래시가 발생합니다.

		\~english
		- Decide whether it uses OnException callback function or not.
		- Default value is true.
		- If setting it as false, when exception occurs during  user callback, crash will occur as OnException is not called.

		\~chinese
		- ??是否使用 OnException Callback功能。
		- 基本?? true。
		- 如果指定false，用?在Callback?程中?生意想不到的 Exception ?，OnException?不被呼出，且?生Crash。

		\~japanese
		- OnException Callback機能を使用するかどうかを選?します。
		- デフォルト値はtrueです。
		- もしfalseを指定するとユ?ザ?Callbackから予想できないExceptionが?生した時、OnExceptionが呼び出されずにクラッシュが?生します。
		\~
		*/
		bool m_allowOnExceptionCallback;

		/**
		\~korean
		- true로 설정되면 RecursiveUpdate계열 요청을 처리 할 때 각 요청을 순서대로 하나씩 수행합니다.
		- 성능에 악영향을 미치지만 Deadlock을 방지하기 위한 옵션입니다. 원인을 알 수 없는 Deadlock이 발생 할 때만 사용하는 것을 권장합니다.
		- 기본값은 false입니다.

		\~english
		- If set to 'true', each of the request for 'RecursiveUpdate' will be conducted in order.
		- Although it can cause harm to its performance, this is an alternative for deadlock prevention. We recommend you to use only as an option when deadlock occurs with an unknown cause.
		- The default value is ‘false’.

		\~chinese
		- ?定?true的?,?理RecursiveUpdate系列的?求?,按照各?求的?序一??地履行。
		- ?然在性能上?涉?影?,但却是?防止Deadlock的一?配置。建?只在?无法了解原因的Deadlock?生?才使用。
		- 默??是假的。

		\~japanese
		- tureに設定されるとRecursiveUpdate系列の要請を?理する際に各要請を順番に一つずつ行います。
		- このオプションは性能に?影響を及ぼす恐れはありますが、Deadlockを防ぐためのものです。原因のわからないDeadlockが?生した時のみ使用することをお?めします。
		- デフォルト値はfalseです。
		\~
		*/
		bool m_serializeRecursiveUpdateWork;

		/**
		\~korean
		- 이 값이 true이면 클라이언트가 접속 종료 시 해당 클라이언트가 RequestIsolateData를 요청한 데이터들의 격리를 자동으로 해제합니다.
		- 기본값은 true입니다.

		\~english
		- If this value is true, the client will automatically relieve the isolation of data which requested RequestIsolateData when the client is disconnected.
		- The default value is true.

		\~chinese
		- 如果?价格是true的?, ?客?下??,?客??RequestlsolateData所要求的?据隔???被自?解除。
		- 默??是true。

		\~japanese
		- この 値が trueなら クライアントが 接? 終了する 時 該? クライアントが RequestIsolateDataを 要請した デ?タたちの 隔離を 自動的に 解除します。
		- デフォルト値はtrueです。
		\~
		*/
		bool m_autoDeisolateData;

		CDbCacheServer2StartParameter();
	};

	/**
	\~korean
	<a target="_blank" href="http://guide.nettention.com/cpp_ko#dbc2_client_server" >DB cache 클라이언트와 서버</a> 입니다.

	\~english
	<a target="_blank" href="http://guide.nettention.com/cpp_en#dbc2_client_server" >DB cache client and server</a>

	\~chinese
	是<a target="_blank" href="http://guide.nettention.com/cpp_zh#dbc2_client_server" >DB cache客?端和服?器</a>%。

	\~japanese
	\ref dbc2_server です。
	\~
	 */
	class CDbCacheServer2
	{
	protected:
		CDbCacheServer2() {}
	public:
		virtual ~CDbCacheServer2() {}

		/**
		\~korean
		접속된 클라이언트 수를 리턴합니다.

		\~english
		Return the client is connected

		\~chnese
		Return 已?接的客?端?。

		\~japanese
		接?されたクライアント?をリタ?ンします。
		\~
		 */
		virtual intptr_t GetCachingDataTreeCount() = 0;

		/**
		\~korean
		DB cache 서버 인스턴스를 생성합니다.

		\~english
		Creates DB cache server instance

		\~chinese
		?建DB cache服?器?例。

		\~japanese
		DB cacheサ?バ?インスタンスを生成します。
		\~
		 */
		PROUDSRV_API static CDbCacheServer2* New();

		/**
		\~korean
		클라이언트로부터의 접속을 활성화하고, DBMS와의 실제 연결을 시작합니다.
		\param params CDbCacheServer2를 시작하는데 필요한 설정값 (참고 \ref CDbCacheServer2StartParameter)

		\~english TODO:translate needed
		Enable the connection from the client and start the actual connection with DBMS. 
		\param params The configuration value required to start CDbCacheServer2 (refer to \ref CDbCacheServer2StartParameter)

		\~chinese
		激活?玩家的?接，?始?DBMS的???接。
		\param param ?始 CDbCacheServe2r%需要的?置?（?考 \ref CDbCacheServer2StartParameter）。

		\~japanese
		クライアントからの接?を活性化して、DBMSとの?際接?を開始します。
		\param params CDbCacheServer2を開始するに必要な設定値(?考 \ref CDbCacheServer2StartParameter)

		\~
		 */
		virtual void Start(CDbCacheServer2StartParameter &params) = 0;

		/**
		\~korean
		클라이언트와의 접속을 모두 끊고, 하던 작업을 모두 처리후에 스레드를 종료 합니다.

		\~english
		Disconnect with all clients, finish all works that in process then close thread.

		\~chinese
		???玩家的?接，?理完?行中的工作后?止?程。

		\~japanese
		クライアントとの接?を全て切って、行っていた作業を全て?理後にスレッドを終了します。
		\~
		*/
		virtual void Stop() = 0;

		/**
		\~korean
		DB cache client2로부터 받은 데이터 추가/변경/제거 내용을 받은 후부터 DBMS에 기록할 때까지
		대기하는 시간입니다.
		- 너무 짧으면 DBMS에 걸리는 부하가 증가합니다.
		- 너무 길면 DB cache server가 비정상 종료(예: 정전)할 경우 DBMS에 기록하지 못하고 메모리에
		대기중이던 데이터는 소실될 확률이 커집니다.
		\param val 밀리초 단위 시간

		\~english TODO:translate needed
		This is the time to stand by from after receiving the data add/modify/delete content from DB cache client 2 until recording it in DBMS. 
		- If too short, the load on DBMS increases
		- If too long, when the DB cache server terminates abnormally (e.g.: power failure), it cannot record in DBMS and the data waiting in the memory is likely to be lost.  
		\param val Time in millisecond unit

		\~chinese
		?DB cache client2接收添加/修改/?除?据的?容后等待至往DBMS??的??。
		- 太短的??DBMS的?荷?增加。
		- 太?的?，?非正常?止（例：停?）DB cache server的?候不能往DBMS??，而在?存等待的?据消失的?率?增加。
		\param val 秒?位??。

		\~japanese
		DB cache client2より受けたデ?タの追加/?更/除去?容を受けた後からDBMSに記?する時まで待つ時間です。
		- あまりにも短いとDBMSにかかる負荷が?加します。
		- あまりにも長いとDB cache serverが異常終了(例：停電)する場合、DBMSに記?できずにメモリ?で待っていたデ?タは消失される確率が大きくなります。
		\param val ミリ秒?位時間

		\~
		 */
		virtual void SetDbmsWriteIntervalMs(int64_t val)=0;

		/**
		\~korean
		DB cache client2에서 unload한 데이터가 DB cache server 메모리에서도 완전히 제거할
		때까지 대기하는 시간입니다.
		- 너무 짧으면 DBMS에 걸리는 부하가 증가합니다.
		- 너무 길면 DB cache server2의 메모리 사용량이 커집니다.
		\param val 밀리초 단위 시간

		\~english TODO:translate needed
		Waiting time that the unloaded data at DB cache client waits until it is fully removed from DB cache memory
		- If this is set too short then the work load to DBMS will increase.
		- If this is set too long then it will increase the amount of memory usage in DB cache server.

		\~chinese
		?DB cache client2 unload的?据在DB cache server?存也完全?除的等待??。
		- 太短的??DBMS的?荷?增加。
		- 太?的?DB cache server2的?存使用量?加大。
		\param val 毫秒?位??

		\~japanese
		DB cache client2でunloadしたデ?タがDB cache serverメモリ?でも完全に除去される時まで待つ時間です。
		- あまりにも短いとDBMSにかかる負荷が?加します。
		- あまりにも長いとDB cache serve2のメモリ?使用量が大きくなります。
		\param val ミリ秒?位時間

		\~
		 */
		virtual void SetUnloadedDataHibernateDurationMs(int64_t val)=0;

		/**
		\~korean
		Proud.CNetServer.SetDefaultTimeoutTimeMs과 같은 역할을 합니다.

		\~english
		Performs similar role as Proud.CNetServer.SetDefaultTimeoutTimeMs

		\~chinese
		起着? Proud.CNetServer.SetDefaultTimeoutTimeMs%一?的作用。

		\~japanese
		Proud.CNetServer.SetDefaultTimeoutTimeMsと同じ役割をします。
		\~
		 */
		virtual void SetDefaultTimeoutTimeMs(int newValInMs) = 0;

		/**
		\~korean
		Proud.CNetServer.SetDefaultTimeoutTimeSec과 같은 역할을 합니다.
		\param val 초 단위 시간

		\~english TODO:translate needed.
		Performs similar role as Proud.CNetServer.SetDefaultTimeoutTimeSec
		\param val

		\~chinese
		起着? Proud.CNetServer.SetDefaultTimeoutTimeSec%一?的作用。
		\param val 秒?位??

		\~japanese
		Proud.CNetServer.SetDefaultTimeoutTimeSecと同じ役割をします。
		\param val 秒?位時間

		\~
		 */
		virtual void SetDefaultTimeoutTimeSec(double newValInSec) = 0;


		/**
		\~korean
		이 DB cache server2가 열어 놓은 TCP 리스닝 소켓의 주소를 얻습니다.

		\~english
		Gets the address of TCP listening socket opened by this DB cache server

		\~chinese
		?得此DB cache server2打?的TCP收??口地址。
		
		\~japanese
		このDB cache server2が開けて置いたTCPリスニングソケットのアドレスを得ます。
		 */
		virtual AddrPort GetTcpListenerLocalAddr() = 0;

		/**
		\~korean
		이 DB cache Server2에 접속한 DB Cache Cleint2 들에 대한 AddrPort 값들을 얻는다.
		- 이 메서드로 얻는 목록은 호출할 시점의 스냅샷일 뿐이다.
		이 함수가 리턴된 후에도 클라이언트 목록의 내용이 실제 서버의 상태와 동일함을 보장하지는 않는다.
		\param output AddrPort들의 목록이 채워질 곳

		\~english TODO:translate needed.
		Obtain the AddrPort for the DB Cache Client 2 connected to this DB Cache Server2. 
		- The list obtained by this method is only the snapshot at the time of being called. 
		Even after this function is returned, it does not guarantee that the content of the client list is the same as the status of the actual server. 
		\param output Place where the list of AddrPort will be filled out. 

		\~chinese
		?得?接??DB cache Server2的DB Cache Cleint2的AddrPort?。
		- 用??方法?得的目?只是呼叫?候的snapshot而已。
		此函?返回以后也不能保障玩家目?的?容???服?器的??是相同的。
		\param output AddrPort的目?要被?充的地方。

		\~japanese
		このDB cache Server2に接?したDB Cache Cleint2などに?するAddrPort値を得ます。
		- このメソッドで得るリストは呼び出す時点のスナップショットであるだけです。
		この??がリタ?ンされた後にもクライアントリストの?容が?際サ?バ?の?態と同一であることを保障することはありません。
		\param output AddrPortのリストが?たされる所
		\~
		*/
		virtual bool GetAllRemoteClientAddrPort(CFastArray<AddrPort> &ret) = 0;


		/**
		\~korean
		- 독점 로드 요청의 처리를 기다릴 제한 시간을 설정합니다.
		- 이 값으로 설정된 시간 이내에 로드 및 독점권 획득이 완료되지 않으면 해당 요청은 타임아웃으로 실패 처리됩니다.
		- 기본값은 10초입니다. (10000밀리초)
		\param timeoutMs 지정 할 시간 제한입니다. (밀리초 단위)

		\~english
		Configure the time limit to wait for the processing of exclusive load request. 
		- If the load and exclusivity acquisition is not completed within the time set with this value, the request is processed as a failure as a timeout. 
		- The default value is 10 seconds (10000 milliseconds)
		\param timeoutMs The time limit to be designated (millisecond unit)

		\~chinese
		- ???加??求?理事件?定等待??。
		- 如果在?定的???未完成加???得???，??求就?被超??理。
		- 默???10秒。 (10000微秒)
		\paramtimeoutMs 指定的事件限制。 (微妙?位)

		\~japanese
		- ?占ロ?ド要請の?理を待つ制限時間を設定します。
		- この値で設定された時間以?にロ?ド及び?占?獲得が完了されなければ、該?要請はタイムアウトで失敗?理になります。
		- 基本値は10秒です。(10000ミリ秒)
		\param timeoutMs 指定する時間制限です。(ミリ秒?位)

		\~
		*/
		virtual void SetUnloadRequestTimeoutTimeMs(int64_t timeoutMs) = 0;

		/**
		\~korean
		- 독점 로드 요청의 타임아웃 설정값을 밀리초 단위로 반환합니다.

		\~english
		Return the timeout configuration value of the exclusive load request in millisecond unit. 

		\~chinese
		- 把??加?超??定???成微妙?位。

		\~japanese
		- ?占ロ?ド要請のタイムアウト設定値をミリ秒?位で返還します。
		\~
		*/
		virtual int64_t GetUnloadRequestTimeoutTimeMs() const = 0;
	};
	/**  @} */
#if (_MSC_VER>=1400)
#pragma managed(pop)
#endif
}

#ifdef _MSC_VER
#pragma pack(pop)
#endif
#endif